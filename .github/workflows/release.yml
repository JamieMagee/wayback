name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout main branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20
          cache: "pnpm"

      - name: Configure Git
        run: |
          git config --global user.email 'jamie.magee@gmail.com'
          git config --global user.name 'Jamie Magee'

      - run: pnpm install

      - run: pnpm build

      - run: pnpm test

      - name: Get current version from Git tags
        id: current_version
        run: |
          # Get the latest semantic version tag (v*.*.*) excluding major version tags
          latest_tag=$(git tag -l 'v*.*.*' --sort=-version:refname | head -1 || echo "")

          if [ -z "$latest_tag" ]; then
            # No semantic version tags exist, start from v0.0.0
            current="0.0.0"
          else
            # Remove 'v' prefix from tag to get version number
            current="${latest_tag#v}"
          fi

          echo "current=$current" >> $GITHUB_OUTPUT
          echo "Current version: $current"

      - name: Calculate new version
        id: version_bump
        run: |
          current="${{ steps.current_version.outputs.current }}"

          # Parse current version
          if [[ "$current" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            # Default to 0.0.0 if version format is unexpected
            major=0
            minor=0
            patch=0
          fi

          # Calculate new version (without v prefix)
          case "${{ inputs.version_bump }}" in
            major) new_version="$((major + 1)).0.0" ;;
            minor) new_version="$major.$((minor + 1)).0" ;;
            patch) new_version="$major.$minor.$((patch + 1))" ;;
            *) echo "Invalid version bump type" && exit 1 ;;
          esac

          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "New version will be: v$new_version"

      - name: Create release branch and tag
        run: |
          # Check if release branch exists on remote
          if git ls-remote --heads origin release | grep -q release; then
            echo "Release branch exists on remote, fetching and resetting..."
            git fetch origin release
            git checkout -B release origin/release
            # Reset to main to get latest changes
            git reset --hard main
          else
            echo "Creating new release branch..."
            git checkout -B release
          fi

          # Rebuild after git reset since dist/ is gitignored
          echo "Rebuilding project for release..."
          pnpm build

          # Ensure dist directory exists and is built
          if [ ! -d "dist" ] || [ ! -f "dist/index.mjs" ]; then
            echo "Error: dist/index.mjs not found. Build may have failed."
            exit 1
          fi

          # Add only the essential files for the GitHub Action
          git add --force README.md action.yml dist/
          git commit -m "chore: release v${{ steps.version_bump.outputs.new_version }}"

          # Create tag from release branch
          git tag "v${{ steps.version_bump.outputs.new_version }}"

          # Push everything at once (force push release branch since we reset it)
          git push origin release --force
          git push origin "v${{ steps.version_bump.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2
        with:
          tag_name: v${{ steps.version_bump.outputs.new_version }}
          name: v${{ steps.version_bump.outputs.new_version }}
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update major version tag
        run: |
          version="${{ steps.version_bump.outputs.new_version }}"
          major=$(echo $version | cut -d. -f1)

          # Switch back to release branch for major version tag
          git checkout release

          # Force update major version tag to point to latest release
          git tag -f "v$major"
          git push origin "v$major" --force
